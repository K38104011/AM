@{
    ViewBag.Title = "Add User";
}

<div class="box-header with-border">
    <h3 class="box-title">Add user</h3>
</div>
<!--/.box header-->

<div class="box-body">
    <div class="form-horizontal">
        <input type="hidden" id="text-parent-group-dn-add-user-view" class="form-control" />
        <div class="form-group">
            <label class="control-label col-md-2">Parent Group</label>
            <div class="col-md-10">
                <input type="text" id="text-parent-group-add-user-view" class="form-control" readonly />
                <span class="text-danger" id="validate-parent-group-add-user-view"></span>
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label" for="saveto">Save To </label>
            <div class="col-md-10" id="saveto">
                <input type="checkbox" id="saveToLdap" name="saveToLdap" checked="checked" title="Add users to LDAP"> Save to LDAP
                <input type="checkbox" id="saveToSvnacm" name="saveToSvnacm" onclick="enableSVNACM()" title="Add users to SVNACM"> Save to SVNACM
                <input type="checkbox" id="saveToRedmine" name="saveToRedmine" onclick="enableREDMINE()" title="Add users to Redmine"> Save to Redmine
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label" for="groupsvn">Group in SVNACM</label>
            <div class="col-md-10">
                <input type="text" name="groupsvn" id="groupsvn" class="form-control" readonly />
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label" for="projectsvn">Project name in SVNACM</label>
            <div class="col-md-10">
                <input type="text" name="projectsvn" id="projectsvn" class="form-control" readonly />
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-2 control-label" for="groupredmine">Group in REDMINE</label>
            <div class="col-md-10">
                <input type="text" name="groupredmine" id="groupredmine" class="form-control" readonly />
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2"></div>
            <div class="col-md-10">
                <div id="info"></div>
            </div>
        </div>
    </div>
</div>
<!--/.box body-->
<div class="box-footer clearfix pull-right">
    <input type="submit" value="Save" id="btn-AddUser" class="btn btn-info" />
    <input type="button" value="Cancel" class="btn btn-default" onclick="@(" window.location.href='" +
                    @Url.Action("Index", "Home") + "' ");" />
</div>
<script>
    function enableSVNACM() {
        if (document.getElementById('saveToSvnacm').checked) {
            $('#groupsvn').attr("readonly", false);
            $('#projectsvn').attr("readonly", false);
        }
        else {
            $('#groupsvn').attr("readonly", true);
            $('#projectsvn').attr("readonly", true);
            $('#groupsvn').val("");
            $('#projectsvn').val("");
        }
    }

    function enableREDMINE() {
        if (document.getElementById('saveToRedmine').checked) {
            $('#groupredmine').attr("readonly", false);
        }
        else {
            $('#groupredmine').attr("readonly", true);
            $('#groupredmine').val("");
        }
    }

    function validateEmailExist(email) {
        var res = "";
        $.ajax({
            url: '/User/isEmailExists?email=' + email,
            type: 'GET',
            async: false,
            success: function (result) {
                res = result;
            }
        });
        return !res;
    }

    function validateAccountExist(account) {
        var res = "";
        $.ajax({
            url: '/User/isAccountExists?account=' + account,
            type: 'GET',
            async: false,
            success: function (result) {
                res = result;
            }
        });
        return !res;
    }

    function validateEmail(email, callback) {
        setTimeout(function () {
            var regex = /^([\w-\.]+)@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([\w-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$/;
            if (!email) {
                showModal(Notifications.INVALID_EMAIL_REQUIRED);
                callback(false);
            }
            else if (!regex.test(email)) {
                showModal(Notifications.INVALID_EMAIL);
                callback(false);
            }
            else if (!validateEmailExist(email)) {
                showModal(Notifications.INVALID_EMAIL_EXIST);
                callback(false);
            }
            else {
                callback(true);
            }
        }, 200);
    }

    function validateAccount(account, callback) {
        setTimeout(function () {
            var accountRegex = /^[a-zA-Z0-9]+$/;

            if (!account) {
                showModal(Notifications.INVALID_ACCOUNT_REQUIRED);
                callback(false);
            }
            else if (account.length > 50) {
                showModal(Notifications.INVALID_ACCOUNT_LENGTH);
                callback(false);
            }
            else if (!accountRegex.test(account)) {
                showModal(Notifications.INVALID_ACCOUNT_NAME);
                callback(false);
            }
            else if (!validateAccountExist(account)) {
                showModal(Notifications.INVALID_ACCOUNT_EXIST);
                callback(false);
            }
            else {
                callback(true);
            }
        }, 200);
    }

    function validatePassword(password, callback) {
        setTimeout(function () {
            if (!password) {
                showModal(Notifications.INVALID_PASSWORD_REQUIRED);
                callback(false);
            }
            else if (password.length < 6) {
                showModal(Notifications.INVALID_PASSWORD_MIN_LENGTH);
                callback(false);
            }
            else if (password.length > 30) {
                showModal(Notifications.INVALID_PASSWORD_MAX_LENGTH);
                callback(false);
            }
            else if (!/^[a-zA-Z0-9!@@#$&()`.+,/"-]*$/.test(password)) {
                showModal(Notifications.INVALID_PASSWORD_SPECIAL_CHARACTERS);
                callback(false);
            }
            else if (!/\d/.test(password)) {
                showModal(Notifications.INVALID_PASSWORD_DIGIT);
                callback(false);
            }
            else if (!/[a-z]/.test(password)) {
                showModal(Notifications.INVALID_PASSWORD_LOWERCASE);
                callback(false);
            }
            else if (!/[A-Z]/.test(password)) {
                showModal(Notifications.INVALID_PASSWORD_UPPERCASE);
                callback(false);
            }
            else {
                callback(true);
            }
        }, 200);
    }

    function validateFirstOrLastName(firstName, callback) {
        var firstNameRegex = /^[a-zA-Z]+$/;
        setTimeout(function () {
            if (!firstName) {
                showModal(Notifications.INVALID_FIRST_LAST_NAME_REQUIRED);
                callback(false);
            }
            else if (firstName.length > 50) {
                showModal(Notifications.INVALID_FIRSTNAME_LENGTH);
                callback(false);
            }
            else if (!firstNameRegex.test(firstName)) {
                showModal(Notifications.INVALID_FIRSTNAME);
                callback(false);
            }
            else {
                callback(true);
            }
        }, 200);
    }

    function validatePhoneNumber(phone, callback) {
        // only digit
        var phoneNumberRegex = /^\d+$/;
        setTimeout(function () {
            if (!phone) {
                showModal(Notifications.INVALID_PHONE_REQUIRED);
                callback(false);
            }
            else if (phone.length !== 10) {
                showModal(Notifications.INVALID_PHONE);
                callback(false);
                return false;
            }
            else if (!phoneNumberRegex.test(phone)) {
                showModal(Notifications.INVALID_PHONE);
                callback(false);
            }
            else {
                callback(true);
            }
        }, 200);
    }

    var dataElement = document.querySelector('#info');
    var dataElementContainer = dataElement.parentNode;
    var dataSettings = {
        startcols: 6,
        startRows: 1,
        dataShema: {
            id: null,
            firstName: null,
            lastName: null,
            account: null,
            email: null,
            phone: null,
            password: null,
        },
        columns: [
            {
                data: 'firstname',
                type: 'text',
                validator: validateFirstOrLastName,
                allowInvalid: true
            },
            {
                data: 'lastname',
                type: 'text',
                validator: validateFirstOrLastName,
                allowInvalid: true
            },
            {
                data: 'account',
                type: 'text',
                validator: validateAccount,
                allowInvalid: true
            },
            {
                data: 'email',
                type: 'text',
                validator: validateEmail,
                allowInvalid: true
            },
            {
                data: 'phone',
                type: 'text',
                validator: validatePhoneNumber,
                allowInvalid: true
            },
            {
                data: 'password',
                type: 'password',
                validator: validatePassword,
                allowInvalid: true
            }
        ],
        stretchH: 'all',
        minSpareRows: 1,
        autoWrapRow: true,
        rowHeaders: true,
        colHeaders: [
            'First Name', 'Last Name', 'Account', 'Email', 'Phone', 'Password'
        ],
        manualRowResize: true,
        manualColumnResize: true,
    };

    var info = new Handsontable(dataElement, dataSettings);
</script>
